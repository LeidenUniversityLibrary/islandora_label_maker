<?php

/**
 * @file
 * islandora_label_maker.module
 *
 *
 *  Copyright 2018 Leiden University Library
 *
 *  This file is part of islandora_label_maker.
 *
 *  islandora_label_maker is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 */

// Permissions.
define('ISLANDORA_LABEL_MAKER_ADMIN_PERMISSION', 'Islandora label maker admin permission');

/**
 * Implements hook_menu().
 */
function islandora_label_maker_menu() {
  return array(
    'admin/islandora/tools/islandora_label_maker' => array(
      'title' => 'Islandora Label Maker',
      'type' => MENU_NORMAL_ITEM,
      'page callback' => 'drupal_get_form',
      'page arguments' => array('islandora_label_maker_admin_form'),
      'file' => 'includes/admin.form.inc',
      'access arguments' => array(ISLANDORA_LABEL_MAKER_ADMIN_PERMISSION),
    ),
    'admin/islandora/tools/islandora_label_maker/config' => array(
      'title' => 'Configuration',
      'type' => MENU_DEFAULT_LOCAL_TASK,
      'access arguments' => array(ISLANDORA_LABEL_MAKER_ADMIN_PERMISSION),
    ),
    'admin/islandora/tools/islandora_label_maker/pending' => array(
      'title' => 'Pending Labels',
      'type' => MENU_LOCAL_TASK,
      'page callback' => 'drupal_get_form',
      'page arguments' => array('islandora_label_maker_pending_form'),
      'file' => 'includes/pending.form.inc',
      'access arguments' => array(ISLANDORA_LABEL_MAKER_ADMIN_PERMISSION),
    ),
    'islandora/object/%islandora_object/manage/generate_label' => array(
      'title' => 'Generate Label',
      'file' => 'includes/generate.form.inc',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('islandora_label_maker_generate_form', 2),
      'type' => MENU_CALLBACK,
      'access arguments' => array(ISLANDORA_LABEL_MAKER_ADMIN_PERMISSION),
    ),
  );
}

/**
 * Implements hook_permission().
 */
function islandora_label_maker_permission() {
  return array(
    ISLANDORA_LABEL_MAKER_ADMIN_PERMISSION => array(
      'title' => t('Administer configuration'),
    ),
  );
}

/**
 * Implements hook_theme().
 */
function islandora_label_maker_theme($existing, $type, $theme, $path) {
  return array(
    'islandora_label_maker_config_table_drag_components' => array(
      'render element' => 'element',
      'file' => 'theme/theme.inc',
    ),
    'islandora_label_maker_generate_table_components' => array(
      'render element' => 'element',
      'file' => 'theme/theme.inc',
    ),
  );
}

/**
 * Implements hook_form_alter().
 */
function islandora_label_maker_form_islandora_object_properties_form_alter(&$form, &$form_state, $form_id) {
  module_load_include('inc', 'islandora_label_maker', 'includes/utilities');
  $objectid = isset($form_state['object'])?$form_state['object']->id:'';
  $related = islandora_label_maker_related_solrobj_for_object($objectid);
  $form['admin']['submit'] = array(
    '#type' => 'submit',
    '#value' => (count($related) > 0)?t('Generate new labels...'):t('Generate new label...'),
    '#submit' => array('islandora_label_maker_goto_generate_label_submit'),
    '#limit_validation_errors' => array(array('pid')),
  );
}

/**
 * Callback function for object properties admin form generate label button.
 *
 * @param array $form
 *   The Drupal form.
 * @param array $form_state
 *   The Drupal form state.
 */
function islandora_label_maker_goto_generate_label_submit(array $form, array &$form_state) {
  drupal_goto("islandora/object/{$form_state['values']['pid']}/manage/generate_label");
}

/**
 * Implements hook_islandora_datastream_ingested().
 */
function islandora_label_maker_islandora_datastream_ingested(AbstractObject $object, AbstractDatastream $datastream) {
  module_load_include('inc', 'islandora_label_maker', 'includes/utilities');
  islandora_label_maker_add_to_label_queue_if_needed($object->id, $datastream->id);
}

/**
 * Implements hook_islandora_datastream_modified().
 */
function islandora_label_maker_islandora_datastream_modified(AbstractObject $object, AbstractDatastream $datastream) {
  module_load_include('inc', 'islandora_label_maker', 'includes/utilities');
  islandora_label_maker_add_to_label_queue_if_needed($object->id, $datastream->id);
}

/**
 * Implements hook_islandora_datastream_purged().
 */
function islandora_label_maker_islandora_datastream_purged(AbstractObject $object, $dsid) {
  module_load_include('inc', 'islandora_label_maker', 'includes/utilities');
  islandora_label_maker_add_to_label_queue_if_needed($object->id, $dsid);
}

/*
* Implements hook_cron_queue_info().
*/
function islandora_label_maker_cron_queue_info() {
 $queues['islandora_label_maker_queue'] = array(
    'worker callback' => 'islandora_label_maker_generate_label_worker',
    'time' => 10,
 );
 return $queues;
}

function islandora_label_maker_generate_label_worker($data) {
  module_load_include('inc', 'islandora_label_maker', 'includes/utilities');
  $pid = $data['object_id'];
  $solrquery = "PID:\"$pid\"";
  $solrobj = islandora_label_maker_object_for_solr_query($solrquery);
  if ($solrobj == null) {
    throw new Exception("Cannot update label of object $pid, because Solr record can not be found");
  }
  if ($solrobj['solr_doc']['timestamp'] < $data['timestamp']) {
    throw new Exception("Cannot update label of object $pid, because Solr is not up-to-date yet");
  }
  islandora_label_maker_update_label_for_object_id($pid);
  if ($data['includerelated']) {
    islandora_label_maker_add_related_to_label_queue_if_needed($pid, 0);
  }
}


